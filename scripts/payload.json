{
    "name": "UltraDDR ThreatFeed Agent",
    "description": "https://github.com/sbarbett/uddr_client/uddr_wpm_agent",
    "scriptBody": "eval(datafile(\"IOCParser.js\").readContents()+\"\");\r\neval(datafile(\"DOHClient.js\").readContents()+\"\");\r\nvar threatFeeds = JSON.parse(datafile(\"threatFeeds.json\").readContents());\r\nvar credentials = getCSV(\"credentials.csv\");\r\nvar c = openHttpClient();\r\n\r\nbeginTransaction(function(tx) {\r\n\tvar feed;\r\n\tvar parsed = [];\r\n\t\r\n\tbeginStep(\"Download the OpenPhish feed\", function(s) {\r\n\t\ts.setStepTimeout(10000);\r\n\t\tlog(\"Downloading feed...\\n===================================\\n\")\r\n\t\tvar n = threatFeeds['feeds'][0]['name'];\r\n\t\tvar u = threatFeeds['feeds'][0]['url'];\r\n\t\tlog(\"Using feed '\" + n + \"' @ \" + u);\r\n\t\tvar g = c.get(u);\r\n\t\tvar t = g.getBody();\r\n\t\tfeed = t.split(\"\\n\");\r\n\t\tlog(\"\\n\");\r\n\t});\r\n\t\r\n\tbeginStep(\"Iterate through feed and parse IoCs\", function(s) {\r\n\t\ts.setStepTimeout(10000);\r\n\t\tlog(\"Parsing feed...\\n===================================\\n\")\r\n\t\tfor(var i = 0; i < feed.length; i++) {\r\n\t\t\ttry {\r\n\t\t\t\tvar p = new IOCParser(feed[i]);\r\n\t\t\t\tp = p.toString();\r\n\t\t\t\tif (parsed.indexOf(p) === -1) {\r\n\t\t\t\t\tparsed.push(p);\r\n\t\t\t\t\tlog(\"Added: Line \" + i + \": \" + p);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlog(\"Duplicate: Line \" + i + \": \" + p);\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {\r\n\t\t\t\tlog(\"Error: Line \" + i + \": \" + e);\r\n\t\t\t}\r\n\t\t}\r\n\t\tlog(\"\\n\");\r\n\t});\r\n\t\r\n\tbeginStep(\"Query non-duplicate IoCs against UDDR\", function(s) {\r\n\t\ts.setStepTimeout(120000);\r\n\t\tlog(\"Querying IoCs...\\n===================================\\n\")\r\n\t\tvar r = credentials.get(0);\r\n\t\tvar cn = r.get('name');\r\n\t\tvar cid = r.get('clientID');\r\n\t\tlog(\"Querying the '\" + cn + \"' resolver using ID \" + cid);\r\n\t\tfor(var i = 0; i < parsed.length; i++) {\r\n\t\t\ttry {\r\n\t\t\t\tvar r = new DOHClient(parsed[i], cid);\r\n\t\t\t\tr = r.response();\r\n\t\t\t\tlog(\"Data for \" + parsed[i] + \": \" + r);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tlog(\"Error querying \" + parsed[i] + \": \" + e);\r\n\t\t\t}\r\n\t\t}\r\n\t\tlog(\"\\n\");\r\n\t});\r\n\t\r\n});",
    "validationBypassed": false
}
